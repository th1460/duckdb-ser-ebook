---
title: R E DUCKDB
lang: pt
style: justify
number-sections: true
authors:
  - name: Thiago de Oliveira Pires
    address: CIO, International Business Machines Corporation
    email: thop100@hotmail.com
abstract: |
  Muitos já tiveram o problema, principalmente relacionado a memória da computador, quando tentam ler e manipular uma base de dados muito grande. Existem várias soluções para lidar com grandes bases de dados, mas uma tem chamado bastante atenção atualmente: DuckDB Duckdb é um banco de dados simples de operar, por ser um banco de dados embarcado/embutido no estilo SQLIte. Contudo, diferentemente do SQLite, o duckdb tem suporte para mais de 20 tipos de variáveis. E alguns destes tipos são aninhados como lista, estrutura e *map*. Pode se fazer consultas em arquivos csv e parquet diretamente. Consultas até em arquivos online salvos em um serviço de armazenamento na núvem (e.g. S3). Tem suporte também para consultas em arquivo json. Além de toda sintaxe padrão do SQL, ele tem algumas funções adicionais e suporta até a sintaxe de list comprehention do python. Este capĩtulo irá apresentar um pouco dos recursos do duckdb e sua interação com a linguagem R.
  
  Palavras Chave: duckdb; SQL; R; banco de dados.
bibliography: References.bib
format: pdf
---

# Introdução

DuckDB é um sistema de gerenciamento de banco de dados (SGBD) de código aberto (i.e. MIT), escrito em C++ e otimizado para consultas analíticas. Ele foi projetado para fornecer alta velocidade e eficiência em consultas complexas em grandes conjuntos de dados. 

Existem duas características principais que distinguem o DuckDB de outras ferramentas de análise de dados: a arquitetura colunar e o processamento vetorizado. A arquitetura colunar permite armazenar dados em colunas separadas, otimizando o acesso aos dados necessários para consultas específicas. Já o processamento vetorizado realiza operações em lotes, aproveitando as otimizações de hardware e reduzindo a latência de acesso à memória. Com isso se produz consultas mais rápidas e eficiêntes.

Outra vantagem do DuckDB é a sua capacidade de compressão de dados. Ele utiliza algoritmos de compressão especializados, resultando em economia de espaço em disco e também contribuindo com uma maior velocidade na consulta.

Existem várias APIs de outras linguagens que poderão interagir com o DuckDB.

# Objetivo

Nesta seção deverão ser apresentados os objetivos do estudo/palestra.

# Aplicação

Nesta seção deverão ser especificados os procedimentos, o contexto e a aplicação realizada.

# Resultados e Discussão

Deverá apresentar uma síntese dos resultados encontrados, podendo incluir tabela e/ou figura. Nesta seção devem ser incluídos comentários sobre os resultados e comparação dos achados do estudo com os de outras publicações.

As tabelas e figuras (Entende-se por figuras: gráficos, mapas, fotografias, etc.) devem ser numeradas sequencialmente em algarismos arábicos. Cada tabela e figura, além da numeração, deve possuir um título autoexplicativo apropriado, colocado centralizado, acima da tabela e abaixo da figura. Tanto a tabela quanto a figura deverão ter a especificação da **FONTE**, posicionada na parte inferior, conforme ilustrado neste template.

## Figuras

Figuras devem ser centralizadas, conforme ilustrado na @fig-Figura1. Toda figura deve apresentar os elementos mínimos conforme apresentado neste modelo. A @fig-Figura1 ilustra a formatação requerida.

Todas as figuras devem trazer a respectiva fonte. A @fig-Figura1 rornece um exemplo padrão para a formatação da fonte.

![Logo do Seminário Internacional de Estatística com R - SER. Fonte: \@NomeDaReferencia.](Figura1.png){#fig-Figura1 width="37.5%" fig-align="center" fig.cap="center"}

Caso a figura ou tabela seja de própria autoria, então utilizar *Fonte: Os autores.* conforme mostrado na @fig-Figura2, a seguir:

![Logo do Seminário Internacional de Estatística com R - SER. Fonte: Os autores.](Figura1.png){#fig-Figura2 width="37.5%" fig-align="center" fig.cap="center"}

Figuras construídas com o RPosit utilizando o *quarto* podem ser formatadas e referenciadas conforme o modelo a seguir.

```{r}
#| label: Figura3
#| echo: false
#| warning: FALSE
#| message: FALSE
#| fig-cap: "Exemplo de figura produzida diretamente com R. Fonte: @hadley."
#| fig-alt: "Disponível em https://quarto.org/docs/get-started/computations/rstudio.html."
#| fig-width: 5
#| fig-height: 2.75
if(!require(ggplot2)){install.packages("ggplot2")}
p=ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2) +
  scale_color_viridis_c() +
  theme_minimal()
p
ggsave("Figura3.png",plot = p,width = 5, height =2.75, dpi = 300,units="in")

```

Note que o código também salva a respectiva figura em formato *.png*, nomeando de acordo com a ordem em que a figura aparece no texto, ou seja, esta é a terceira figura do texto e pode ser referenciada por meio do comando \@fig-Figura3.

Os códigos podem ser inseridos no texto conforme o seguinte exemplo:

```{r}
#| label: Code01
#| echo: true
#| eval: false
if(!require(ggplot2)){install.packages("ggplot2")}
ggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +
  geom_point(alpha = 0.5, size = 2) +
  scale_color_viridis_c() +
  theme_minimal()
```

Neste caso, o código não é avaliado para gerar resultados.

## Tabelas

Aqui estão algumas orientações para inserção de tabelas. Sugerimos utilizar pacotes disponíveis no CRAN para formatação das tabelas-prefira formatações simples. Sugerimos o pacote *gt* para geração das tabelas devido possibilidade de inserir os elementos essenciais. A @tbl-tab01 é um exemplo de tabela de dados com *caption* e fonte.

```{r}
#| label: tbl-tab01
#| tbl-cap: Tabela de Dados
#| echo: false
library("gt")
# Create a display table based on `iris`
iris_tbl <- gt(head(iris)) %>%
  tab_spanner_delim(delim = ".") %>%
  cols_move_to_start(columns = Species) %>%
  fmt_number(
    columns = c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width),
    decimals = 1
  ) %>%
  #tab_header(
  #  title = md("Título, se necessário"),
  #  subtitle = md("[subtítulo, se necessário]")
  #) %>%
  #tab_header(
  #  title = md("Table 1: Example table")
  #) %>%
  tab_source_note(
    source_note = md("Fonte: NOME (ANO).")
  )

iris_tbl


```

## Exemplos de arquivos .bib {#sec-exemplo}

Os arquivos *.bib* devem estar preenchidos com os elementos disponíveis de acordo com a normatização ABNT vigente. Exemplos de entradas *.bib* podem ser encontradas no arquivo *References.bib*.

-   Entrada *.bib* para um livro (@hadley):

```{verbatim}
@Book{hadley,
    author = {Hadley Wickham},
    title = {ggplot2: Elegant Graphics for Data Analysis},
    publisher = {Springer-Verlag New York},
    year = {2016},
    isbn = {978-3-319-24277-4},
    url = {https://ggplot2.tidyverse.org},
  }
```

-   Entrada *.bib* para um manual (@rcore):

```{verbatim}
  
@Manual{rcore,
     title = {R: A Language and Environment for Statistical Computing},
     author = {{R CORE TEAM}},
     organization = {R Foundation for Statistical Computing},
     address = {Vienna, Austria},
     year = {2021},
     url = {https://www.R-project.org/},
     }
```

-   Entrada *.bib* para um manual (@fernando):

```{verbatim}
  
@Internet{fernando,
   author={F. G. PILOTTO},
   title={Estilo BibTeX com as Normas da ABNT},
   url={http://www.if.ufrgs.br/hadrons/abnt/abntdoc.tex},
   note={Acessado em: 11 abr. 2003 },
   internetaddress={http://www.if.ufrgs.br/hadrons/abnt/abntdoc.tex},
   day=11,
   month=abr,
   year=2023
}

```

# Referências {#sec-referências}
